#!/bin/bash
PATH=./node_modules/.bin:$PATH

builderFile="docker-compose.builder.yml"
composeFile="docker-compose.yml"
nginxFile="default.conf"

function :prep {
    if [ ! -f "$composeFile" ]; then
        echo "There is no docker compose file in the oven."
        echo "Try running => bake dock"
        exit 1
    fi
    if [ ! -f "$builderFile" ]; then
        echo "There is no docker builder file in the oven."
        echo "Try running => bake dock"
        exit 1
    fi
}

function dev {
    temp=${temp:-tmp}
    builder="node.docker-compose.builder.tpl.yml"
    compose="node.docker-compose.tpl.yml"
    nginx="default.tpl.conf"
    builderOut=$builderFile
    composeOut=$composeFile
    nginxOut=$nginxFile
    image=${image:-node:12.16.2}
    name=${name:-appname}
    dir=${dir:-/service/app}
    volume=${volume:-$(cat /dev/random | LC_CTYPE=C tr -dc "[:alpha:]" | head -c 12)}
    port=${port:-80}
    hot=${hot:-8080}
    ssl=true
    cmd=${cmd:-[\"npm\",\"start\"]}

    options=(image name dir volume port hot cmd temp)

    while [[ "$#" -gt 0 ]]
    do
        case $1 in
        -i|--image)
            local image="$2"
            ;;
        -n|--name)
            local name="$2"
            ;;
        -d|--dir)
            local dir="$2"
            ;;
        -v|--volume)
            local volume="$2"
            ;;
        -p|--port)
            local port="$2"
            ;;
        -h|--hot)
            local hot="$2"
            ;;
        -c|--cmd)
            local cmd="$2"
            ;;
        -t|--temp)
            local temp="$2"
            ;;
        -s|--ssl)
            local ssl="$2"
            ;;
        esac
        case $3 in
        riot)
            echo "Building Riot files..."
            :riot "$name"
            ;;
        *)
            echo "The dev recipe doesn't have the $3 ingredient yet."
        esac
        shift
    done

    mkdir -p $temp

    curl -so "$temp/$builder" https://gist.githubusercontent.com/markgarrigan/7474e8e6107b599c389721ebe86cbc2d/raw/bd5be53ba4fed97899c652f7fbf62729529ad4a1/node.docker-compose.builder.tpl.yml
    
    if [ "$ssl" = true ]; then
        mkdir certs
        cd certs
        mkcert "$name.loc" "ws.$name.loc"
        cd ..
        curl -so "$temp/$compose" https://gist.githubusercontent.com/markgarrigan/175ba41b4eab2d96991fe49604e49d4b/raw/4ef4472a23647a5f83bac52f2b3adb2b50e659e7/nginx.ssl.node.docker-compose.tpl.yml
        curl -so "$temp/$nginx" https://gist.githubusercontent.com/markgarrigan/e4f7e2baaf085c4382a59478c5dea774/raw/cda3e22601bac16e56c12f02e37d891085d645f6/nginx.parcel.https.tpl.conf
    else
        curl -so "$temp/$compose" https://gist.githubusercontent.com/markgarrigan/175ba41b4eab2d96991fe49604e49d4b/raw/4ef4472a23647a5f83bac52f2b3adb2b50e659e7/nginx.node.docker-compose.tpl.yml
        curl -so "$temp/$nginx" https://gist.githubusercontent.com/markgarrigan/e4f7e2baaf085c4382a59478c5dea774/raw/cda3e22601bac16e56c12f02e37d891085d645f6/nginx.parcel.http.tpl.conf
    fi

    cp $temp/$builder $builderOut
    cp $temp/$compose $composeOut
    cp $temp/$nginx $nginxOut

    for option in "${options[@]}"; do
        sed -i '' 's_'{{$option}}'_'"${!option}"'_g' "$builderOut"
        sed -i '' 's_'{{$option}}'_'"${!option}"'_g' "$composeOut"
        sed -i '' 's_'{{$option}}'_'"${!option}"'_g' "$nginxOut"
    done

    docker volume create $volume
    rm -r $temp
}

function npm {
    :prep
    case $1 in
    install)
        echo "Installing npm packages..."
        docker-compose -f docker-compose.builder.yml run --rm install
        ;;
    init)
        echo "Initializing npm package..."
        docker-compose -f docker-compose.builder.yml run --rm init
        ;;
    build)
        echo "Running npm build script..."
        docker-compose -f docker-compose.builder.yml run --rm build
        ;;
    *)
        echo "The npm recipe doesn't have that ingredient"
    esac
}

function :riot {
    curl -sO https://gist.githubusercontent.com/markgarrigan/424e5418c525e082fde4ed63bc48aa69/raw/64d804bcacc7d905010d87ebd4f7ad8291463bcd/.gitignore
    curl -sO https://gist.githubusercontent.com/markgarrigan/424e5418c525e082fde4ed63bc48aa69/raw/64d804bcacc7d905010d87ebd4f7ad8291463bcd/index.html
    curl -sO https://gist.githubusercontent.com/markgarrigan/424e5418c525e082fde4ed63bc48aa69/raw/64d804bcacc7d905010d87ebd4f7ad8291463bcd/package.json
    curl -sO https://gist.githubusercontent.com/markgarrigan/424e5418c525e082fde4ed63bc48aa69/raw/64d804bcacc7d905010d87ebd4f7ad8291463bcd/riot.config.js
    sed -i '' 's_'{{name}}'_'"${1}"'_g' "package.json"
    mkdir src
    curl -so src/app.riot https://gist.githubusercontent.com/markgarrigan/424e5418c525e082fde4ed63bc48aa69/raw/64d804bcacc7d905010d87ebd4f7ad8291463bcd/app.riot
    curl -so src/index.js https://gist.githubusercontent.com/markgarrigan/424e5418c525e082fde4ed63bc48aa69/raw/64d804bcacc7d905010d87ebd4f7ad8291463bcd/index.js
}

function bash {
    :prep
    echo "Entering bash..."
    docker-compose -f docker-compose.builder.yml run --rm base bash
}

function up {
    :prep
    docker-compose up
}

function default {
    up
}

function help {
    echo ""
    echo "bake <recipe> <args>"
    echo ""
    echo "Recipes:"
    compgen -A function | grep -v ":" | grep -v "default" | cat -n
    echo ""
}

TIMEFORMAT="Baked in %3lR"
time ${@:-default}
